// <auto-generated> This file has been auto generated by EF Core Power Tools. </auto-generated>
#nullable disable
using Microsoft.EntityFrameworkCore;
using System.Data.SqlClient;

namespace Assesment_KartikRohilla.Infrastructure.Entities
{
    public partial class Neosoft_KartikRohillaContext
    {
        private INeosoft_KartikRohillaContextProcedures _procedures;

        public virtual INeosoft_KartikRohillaContextProcedures Procedures
        {
            get
            {
                if (_procedures is null) _procedures = new Neosoft_KartikRohillaContextProcedures(this);
                return _procedures;
            }
            set
            {
                _procedures = value;
            }
        }

        public INeosoft_KartikRohillaContextProcedures GetProcedures()
        {
            return Procedures;
        }
    }

    public partial class Neosoft_KartikRohillaContextProcedures : INeosoft_KartikRohillaContextProcedures
    {
        private readonly Neosoft_KartikRohillaContext _context;

        public Neosoft_KartikRohillaContextProcedures(Neosoft_KartikRohillaContext context)
        {
            _context = context;
        }

        public virtual async Task<List<AddDataResult>> AddDataAsync(string FirstName, string LastName, string EmailAddress, DateTime? DateOfBirth, int? Age, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new[]
            {
                new SqlParameter
                {
                    ParameterName = "FirstName",
                    Size = 10,
                    Value = FirstName ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "LastName",
                    Size = 10,
                    Value = LastName ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "EmailAddress",
                    Size = 255,
                    Value = EmailAddress ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "DateOfBirth",
                    Value = DateOfBirth ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "Age",
                    Value = Age ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<AddDataResult>("EXEC @returnValue = [dbo].[AddData] @FirstName = @FirstName, @LastName = @LastName, @EmailAddress = @EmailAddress, @DateOfBirth = @DateOfBirth, @Age = @Age", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<stp_Emp_AddEmployeeResult>> stp_Emp_AddEmployeeAsync(string FirstName, string LastName, int? CountryId, int? StateId, int? CityId, string EmailAddress, string MobileNumber, string PanNumber, string PassportNumber, string ProfileImage, byte? Gender, bool? IsActive, DateOnly? DateOfBirth, DateOnly? DateOfJoinee, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new[]
            {
                new SqlParameter
                {
                    ParameterName = "FirstName",
                    Size = 100,
                    Value = FirstName ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "LastName",
                    Size = 100,
                    Value = LastName ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "CountryId",
                    Value = CountryId ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "StateId",
                    Value = StateId ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "CityId",
                    Value = CityId ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "EmailAddress",
                    Size = 100,
                    Value = EmailAddress ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "MobileNumber",
                    Size = 15,
                    Value = MobileNumber ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "PanNumber",
                    Size = 12,
                    Value = PanNumber ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "PassportNumber",
                    Size = 20,
                    Value = PassportNumber ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "ProfileImage",
                    Size = 200,
                    Value = ProfileImage ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "Gender",
                    Value = Gender ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.TinyInt,
                },
                new SqlParameter
                {
                    ParameterName = "IsActive",
                    Value = IsActive ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Bit,
                },
                new SqlParameter
                {
                    ParameterName = "DateOfBirth",
                    Value = DateOfBirth ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Date,
                },
                new SqlParameter
                {
                    ParameterName = "DateOfJoinee",
                    Value = DateOfJoinee ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Date,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<stp_Emp_AddEmployeeResult>("EXEC @returnValue = [dbo].[stp_Emp_AddEmployee] @FirstName = @FirstName, @LastName = @LastName, @CountryId = @CountryId, @StateId = @StateId, @CityId = @CityId, @EmailAddress = @EmailAddress, @MobileNumber = @MobileNumber, @PanNumber = @PanNumber, @PassportNumber = @PassportNumber, @ProfileImage = @ProfileImage, @Gender = @Gender, @IsActive = @IsActive, @DateOfBirth = @DateOfBirth, @DateOfJoinee = @DateOfJoinee", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<stp_Emp_CheckColumnValueResult>> stp_Emp_CheckColumnValueAsync(string ColumnName, string Value, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new[]
            {
                new SqlParameter
                {
                    ParameterName = "ColumnName",
                    Size = 100,
                    Value = ColumnName ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "Value",
                    Size = 100,
                    Value = Value ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<stp_Emp_CheckColumnValueResult>("EXEC @returnValue = [dbo].[stp_Emp_CheckColumnValue] @ColumnName = @ColumnName, @Value = @Value", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<stp_Emp_CheckDuplicateValueResult>> stp_Emp_CheckDuplicateValueAsync(string ColumnName, string Value, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new[]
            {
                new SqlParameter
                {
                    ParameterName = "ColumnName",
                    Size = 100,
                    Value = ColumnName ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "Value",
                    Size = 100,
                    Value = Value ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<stp_Emp_CheckDuplicateValueResult>("EXEC @returnValue = [dbo].[stp_Emp_CheckDuplicateValue] @ColumnName = @ColumnName, @Value = @Value", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> stp_Emp_DeleteEmployeeAsync(int? Id, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new[]
            {
                new SqlParameter
                {
                    ParameterName = "Id",
                    Value = Id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[stp_Emp_DeleteEmployee] @Id = @Id", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<stp_Emp_GetCitiesResult>> stp_Emp_GetCitiesAsync(int? stateId, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new[]
            {
                new SqlParameter
                {
                    ParameterName = "stateId",
                    Value = stateId ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<stp_Emp_GetCitiesResult>("EXEC @returnValue = [dbo].[stp_Emp_GetCities] @stateId = @stateId", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<stp_Emp_GetCountriesResult>> stp_Emp_GetCountriesAsync(OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new[]
            {
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<stp_Emp_GetCountriesResult>("EXEC @returnValue = [dbo].[stp_Emp_GetCountries]", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<stp_Emp_GetEmployeeByIdResult>> stp_Emp_GetEmployeeByIdAsync(int? EmployeeId, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new[]
            {
                new SqlParameter
                {
                    ParameterName = "EmployeeId",
                    Value = EmployeeId ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<stp_Emp_GetEmployeeByIdResult>("EXEC @returnValue = [dbo].[stp_Emp_GetEmployeeById] @EmployeeId = @EmployeeId", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<stp_Emp_GetEmployeesResult>> stp_Emp_GetEmployeesAsync(OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            try
            {

                var parameterreturnValue = new SqlParameter
                {
                    ParameterName = "returnValue",
                    Direction = System.Data.ParameterDirection.Output,
                    SqlDbType = System.Data.SqlDbType.Int,
                };

                var sqlParameters = new[]
                {
                parameterreturnValue,
                };
                //var da = await _context.SqlQueryAsync<Temp>("EXEC @returnValue = [dbo].[stp_Emp_Temp]", sqlParameters, cancellationToken);
                var _ = await _context.SqlQueryAsync<stp_Emp_GetEmployeesResult>("EXEC [dbo].[stp_Emp_GetEmployees]");

                returnValue?.SetValue(parameterreturnValue.Value);

                return _;
            }
            catch (Exception ex)
            {
                throw ex;
            }
        }

        public virtual async Task<List<stp_Emp_GetProfileImageNameResult>> stp_Emp_GetProfileImageNameAsync(int? Id, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new[]
            {
                new SqlParameter
                {
                    ParameterName = "Id",
                    Value = Id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<stp_Emp_GetProfileImageNameResult>("EXEC @returnValue = [dbo].[stp_Emp_GetProfileImageName] @Id = @Id", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<stp_Emp_GetStatesResult>> stp_Emp_GetStatesAsync(int? countryId, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new[]
            {
                new SqlParameter
                {
                    ParameterName = "countryId",
                    Value = countryId ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<stp_Emp_GetStatesResult>("EXEC @returnValue = [dbo].[stp_Emp_GetStates] @countryId = @countryId", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<stp_Emp_LoginUserResult>> stp_Emp_LoginUserAsync(string EmailAddress, string Password, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new[]
            {
                new SqlParameter
                {
                    ParameterName = "EmailAddress",
                    Size = 200,
                    Value = EmailAddress ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "Password",
                    Size = 100,
                    Value = Password ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<stp_Emp_LoginUserResult>("EXEC @returnValue = [dbo].[stp_Emp_LoginUser] @EmailAddress = @EmailAddress, @Password = @Password", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<stp_Emp_UpdateEmployeeResult>> stp_Emp_UpdateEmployeeAsync(int? RowId, string FirstName, string LastName, int? CountryId, int? StateId, int? CityId, string EmailAddress, string MobileNumber, string PanNumber, string PassportNumber, string ProfileImage, byte? Gender, bool? IsActive, DateOnly? DateOfBirth, DateOnly? DateOfJoinee, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new[]
            {
                new SqlParameter
                {
                    ParameterName = "RowId",
                    Value = RowId ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "FirstName",
                    Size = 100,
                    Value = FirstName ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "LastName",
                    Size = 100,
                    Value = LastName ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "CountryId",
                    Value = CountryId ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "StateId",
                    Value = StateId ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "CityId",
                    Value = CityId ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "EmailAddress",
                    Size = 100,
                    Value = EmailAddress ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "MobileNumber",
                    Size = 15,
                    Value = MobileNumber ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "PanNumber",
                    Size = 12,
                    Value = PanNumber ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "PassportNumber",
                    Size = 20,
                    Value = PassportNumber ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "ProfileImage",
                    Size = 200,
                    Value = ProfileImage ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "Gender",
                    Value = Gender ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.TinyInt,
                },
                new SqlParameter
                {
                    ParameterName = "IsActive",
                    Value = IsActive ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Bit,
                },
                new SqlParameter
                {
                    ParameterName = "DateOfBirth",
                    Value = DateOfBirth ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Date,
                },
                new SqlParameter
                {
                    ParameterName = "DateOfJoinee",
                    Value = DateOfJoinee ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Date,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<stp_Emp_UpdateEmployeeResult>("EXEC @returnValue = [dbo].[stp_Emp_UpdateEmployee] @RowId = @RowId, @FirstName = @FirstName, @LastName = @LastName, @CountryId = @CountryId, @StateId = @StateId, @CityId = @CityId, @EmailAddress = @EmailAddress, @MobileNumber = @MobileNumber, @PanNumber = @PanNumber, @PassportNumber = @PassportNumber, @ProfileImage = @ProfileImage, @Gender = @Gender, @IsActive = @IsActive, @DateOfBirth = @DateOfBirth, @DateOfJoinee = @DateOfJoinee", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> stp_Emp_UploadImageAsync(int? Id, string ProfilePicture, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new[]
            {
                new SqlParameter
                {
                    ParameterName = "Id",
                    Value = Id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "ProfilePicture",
                    Size = 50,
                    Value = ProfilePicture ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[stp_Emp_UploadImage] @Id = @Id, @ProfilePicture = @ProfilePicture", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }
    }
}
